#!/bin/sh -e

# prepare only
stage=p
flags=--verbose
scm=patch
verbose=-v
builder=debbuild

while getopts pcilabsS:vqr opt
do
	case $opt in
		[pcil]) # prepare, compile, install, list
			stage=$opt
			;;
		[abs]) # build packages (all, binary, source)
		       	stage=$opt
		       	flags=--silent
			;;
		S)	# choose SCM
			scm=$OPTARG
			;;
		v) # bump verbosity
			verbose=-vv
			;;
		q) # dump verbosity
			verbose=
			;;
		r) # use 'rpmbuild' instead of 'debbuild'
			builder=rpmbuild
			;;
		?)
			exit 1
			;;
	esac
done

printf "\n\nbuilding cwebbin with makemake patch\n\n"
$builder -b$stage SPECS/cwebbin.spec $verbose

for extension in tgz tar tar.bz2 tar.gz tar.xz zip
do
	[ $builder != "debbuild" ] && [ $extension = "zip" ] && break
	printf "\n\nbuilding from advent-1.0.%s\n\n" "$extension"
	$builder -D "_default_patch_flags $flags" \
		-t$stage advent-1.0.$extension $verbose
done

printf "\n\nbuilding advent with patches\n\n"
git checkout SPECS/advent.spec
$builder --define="__scm $scm" --define="_default_patch_flags $flags" \
	-b$stage SPECS/advent.spec $verbose

printf "\n\nCheck '%%_CamelCase_Macros'\n\n"
$builder -bp SPECS/Camel.spec $verbose

printf "\n\nCheck other specials\n\n"
$builder -bp SPECS/dummy.spec $verbose
$builder -bp SPECS/mageia.spec $verbose

printf "\n\nbuilding hello project\n\n"
$builder --define="_default_patch_flags $flags" \
	-b$stage SPECS/hello.spec $verbose

printf "\n\nbuilding Pod::Simple project\n\n"
$builder --define="_default_patch_flags $flags" \
	-b$stage SPECS/perl-Pod-Simple.spec $verbose

printf "\n\nbuilding HW project\n\n"
$builder --define="__scm $scm" --define="_default_patch_flags $flags" \
	-b$stage SPECS/hw.spec $verbose
